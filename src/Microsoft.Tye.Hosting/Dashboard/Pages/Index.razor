@page "/"
@inject Application application
@implements IDisposable

<style>
    .binding {
        display: block;
    }
</style>

<h1>Services</h1>
<table class="table service-table">
    <thead>
        <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Source</th>
            <th>Bindings</th>
            <th>Replicas</th>
            <th>Restarts</th>
            <th>Logs</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var service in application.Services.Values)
        {
            var logsPath = $"logs/{service.Description.Name}";
            var servicePath = $"services/{service.Description.Name}";
            <tr @key="service.Description.Name">
                <td>
                    @if(service.ServiceType == ServiceType.External)
                    {
                        <span>@service.Description.Name</span>
                    }
                    else
                    {
                        <a href="@servicePath">@service.Description.Name</a>
                    }
                </td>
                <td>
                    @service.ServiceType
                </td>
                <td class="source-project">
                    @if (service.Description.RunInfo is ProjectRunInfo project)
                    {
                        <p>@project.ProjectFile.FullName</p>
                    }
                    else if (service.Description.RunInfo is DockerRunInfo docker)
                    {
                        <p>@docker.Image</p>
                    }
                </td>
                <td>
                    @if (GetUrls(service) is IEnumerable<string> urls && urls.Any())
                    {
                        foreach (var url in urls)
                        {
                            if (url.StartsWith("http://") || url.StartsWith("https://"))
                            {
                                <span class="binding"><a href="@url" target="_blank">@url</a></span>
                            }
                            else
                            {
                                <span class="binding">@url</span>
                            }
                        }
                    }
                    else
                    {
                        <p>none</p>
                    }
                </td>
                @if (service.ServiceType == ServiceType.External)
                {
                    <td colspan=3></td>
                }
                else
                {
                    <td>@service.Replicas.Count/@service.Description.Replicas</td>
                    <td>@service.Restarts</td>
                    <td>
                        @if (service.Replicas.Any(r => r.Value.State == ReplicaState.InteractionRequired))
                        {
                            <NavLink class="alert alert-danger" href="@logsPath">
                            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-exclamation-triangle-fill flex-shrink-0 me-2" viewBox="0 0 16 16" role="img" aria-label="Warning:">
                                <path d="M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z" />
                            </svg>
                            View
                            </NavLink>
                        }
                        else
                        {
                            <NavLink href="@logsPath">View</NavLink>
                        }
                    </td>
                    <td>
                        <div class="btn-toolbar" role="toolbar" aria-label="Service actions">
                            <div class="btn-group btn-group-sm" role="group">
                            @if (CanStartStop(service))
                            {
                                if (service.Replicas.Count == 0)
                                {
                                    <button title="Start service" @onclick="async () => await StartServiceAsync(service)" class="btn btn-light btn-sm">
                                        <span class="oi oi-media-play"></span>
                                    </button>
                                }
                                else
                                {
                                    <button title="Stop service" @onclick="async () => await StopServiceAsync(service)" class="btn btn-light active btn-sm">
                                        <span class="oi oi-media-stop"></span>
                                    </button>
                                }
                            }

                            @if (CanWatch(service))
                            {
                                if (ProcessRunner.IsWatching(service))
                                {
                                    <button title="Stop watching" @onclick="async () => await SetWatchStateAsync(service, false)" class="btn btn-light active btn-sm">
                                        <span class="oi oi-eye"><span class="oi oi-nested oi-ban"></span></span>
                                    </button>
                                }
                                else
                                {
                                    <button title="Start watching" @onclick="async () => await SetWatchStateAsync(service, true)" class="btn btn-light btn-sm">
                                        <span class="oi oi-eye"></span>
                                    </button>
                                }
                            }
                            </div>
                        </div>
                    </td>
                }
            </tr>
        }
    </tbody>
</table>

@code {
    private List<IDisposable> _subscriptions = new List<IDisposable>();
    private List<ServiceDescription> _ingressDescriptions = new List<ServiceDescription>();
    private const string INGRESS_NAME = "INGRESS";

    static readonly ServiceType[] stopables = new[] { ServiceType.Container, ServiceType.Executable, ServiceType.Project, ServiceType.Function };
    static readonly ServiceType[] watchables = new[] { ServiceType.Project, ServiceType.Function };

    bool CanStartStop(Service? service)
    {
        return service != null && stopables.Contains(service.ServiceType);
    }

    bool CanWatch(Service? service)
    {
        return service != null && watchables.Contains(service.ServiceType);
    }

    string GetUrl(ServiceBinding b)
    {
        return $"{(b.Protocol ?? "tcp")}://{b.Host ?? "localhost"}:{b.Port}";
    }

    IEnumerable<string> GetUrls(Service service)
    {
        foreach (var binding in service.Description.Bindings)
        {
            if (binding.Port != null)
            {
                var url = GetUrl(binding);
                yield return url;
                foreach (var r in binding.Routes)
                {
                    yield return url + r;
                }
            }
            else if (!string.IsNullOrEmpty(binding.ConnectionString))
            {
                yield return binding.ConnectionString;
            }
        }

        foreach (ServiceDescription description in _ingressDescriptions)
        {
            foreach (IngressRule rule in (description?.RunInfo as IngressRunInfo)?.Rules ?? Enumerable.Empty<IngressRule>())
            {
                if (rule.Service == service.Description.Name)
                {
                    ServiceBinding? mainBinding = description?.Bindings.FirstOrDefault(b => b.Protocol == "http") ??
                                      description?.Bindings.FirstOrDefault(b => b.Protocol == "https");

                    string? host = rule.Host;
                    if (string.IsNullOrEmpty(host))
                    {
                        host = mainBinding?.Host ?? mainBinding?.IPAddress ?? "localhost";
                    }
                    int port = mainBinding?.Port ?? 80;

                    string url = GetUrl(new ServiceBinding
                        {
                            Port = port,
                            Host = host,
                            Protocol = mainBinding?.Protocol ?? "http"
                        });
                    if (!string.IsNullOrEmpty(rule.Path))
                    {
                        url += rule.Path;
                    }
                    yield return url;
                }
            }
        }
    }

    protected override void OnInitialized()
    {
        foreach (var a in application.Services.Values)
        {
            _subscriptions.Add(a.ReplicaEvents.Subscribe(OnReplicaChanged));
            if (a.Description.RunInfo is IngressRunInfo)
            {
                _ingressDescriptions.Add(a.Description);
            }
        }
    }

    private void OnReplicaChanged(ReplicaEvent replicaEvent)
    {
        InvokeAsync(() => StateHasChanged());
    }

    private async Task StartServiceAsync(Service service)
    {
        if (service.ServiceType == ServiceType.Container)
        {
            await DockerRunner.RestartContainerAsync(service);
        }
        else
        {
            await ProcessRunner.RestartService(service);
        }
    }

    private async Task StopServiceAsync(Service service)
    {
        if (service.ServiceType == ServiceType.Container)
        {
            await DockerRunner.StopContainerAsync(service);
        }
        else
        {
            await ProcessRunner.KillProcessAsync(service);
        }
    }

    public async Task SetWatchStateAsync(Service service, bool state)
    {
        if (service.ServiceType == ServiceType.Project)
        {
            await ProcessRunner.SetWatchStateAsync(service, state);
        }

    }

    void IDisposable.Dispose()
    {
        _subscriptions.ForEach(d => d.Dispose());
    }
}
